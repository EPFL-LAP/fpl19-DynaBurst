;buildInfoPackage: chisel3, version: 3.1.6, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2018-12-21 23:42:51.273, builtAtMillis: 1545435771273
circuit TLASTGenerator : 
  module ElasticBufferRegExportTLASTGenerator : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, regs : {valid : UInt<1>, bits : UInt<32>}[2], readyReg : UInt<1>}
    
    reg outerRegData : UInt<32>, clock @[TLASTGenerator.scala 40:27]
    reg outerRegValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TLASTGenerator.scala 41:32]
    reg innerRegData : UInt<32>, clock @[TLASTGenerator.scala 42:27]
    reg innerRegValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TLASTGenerator.scala 43:32]
    reg readyReg : UInt<1>, clock @[TLASTGenerator.scala 44:23]
    node _T_39 = eq(readyReg, UInt<1>("h01")) @[TLASTGenerator.scala 46:19]
    when _T_39 : @[TLASTGenerator.scala 47:5]
      outerRegData <= io.in.bits @[TLASTGenerator.scala 48:22]
      innerRegData <= outerRegData @[TLASTGenerator.scala 49:22]
      outerRegValid <= io.in.valid @[TLASTGenerator.scala 50:23]
      node _T_40 = not(io.out.valid) @[TLASTGenerator.scala 51:59]
      node _T_41 = or(io.out.ready, _T_40) @[TLASTGenerator.scala 51:57]
      node _T_42 = not(_T_41) @[TLASTGenerator.scala 51:42]
      node _T_43 = and(outerRegValid, _T_42) @[TLASTGenerator.scala 51:40]
      innerRegValid <= _T_43 @[TLASTGenerator.scala 51:23]
      skip @[TLASTGenerator.scala 47:5]
    node _T_45 = eq(readyReg, UInt<1>("h01")) @[TLASTGenerator.scala 53:33]
    node _T_46 = mux(_T_45, outerRegData, innerRegData) @[TLASTGenerator.scala 53:23]
    io.out.bits <= _T_46 @[TLASTGenerator.scala 53:17]
    node _T_48 = eq(readyReg, UInt<1>("h01")) @[TLASTGenerator.scala 54:34]
    node _T_49 = mux(_T_48, outerRegValid, innerRegValid) @[TLASTGenerator.scala 54:24]
    io.out.valid <= _T_49 @[TLASTGenerator.scala 54:18]
    node _T_50 = not(io.out.valid) @[TLASTGenerator.scala 55:32]
    node _T_51 = or(io.out.ready, _T_50) @[TLASTGenerator.scala 55:30]
    readyReg <= _T_51 @[TLASTGenerator.scala 55:14]
    io.in.ready <= readyReg @[TLASTGenerator.scala 56:17]
    io.regs[0].bits <= outerRegData @[TLASTGenerator.scala 57:21]
    io.regs[0].valid <= outerRegValid @[TLASTGenerator.scala 58:22]
    io.regs[1].bits <= innerRegData @[TLASTGenerator.scala 59:21]
    io.regs[1].valid <= innerRegValid @[TLASTGenerator.scala 60:22]
    io.readyReg <= readyReg @[TLASTGenerator.scala 61:17]
    
  module ElasticBufferTLASTGenerator : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}
    
    inst fullBuffer of ElasticBufferRegExportTLASTGenerator @[TLASTGenerator.scala 27:28]
    fullBuffer.clock <= clock
    fullBuffer.reset <= reset
    fullBuffer.io.in.bits <= io.in.bits @[TLASTGenerator.scala 28:22]
    fullBuffer.io.in.valid <= io.in.valid @[TLASTGenerator.scala 28:22]
    io.in.ready <= fullBuffer.io.in.ready @[TLASTGenerator.scala 28:22]
    io.out.bits <= fullBuffer.io.out.bits @[TLASTGenerator.scala 29:12]
    io.out.valid <= fullBuffer.io.out.valid @[TLASTGenerator.scala 29:12]
    fullBuffer.io.out.ready <= io.out.ready @[TLASTGenerator.scala 29:12]
    
  module TLASTGenerator : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip mult_res : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip row_len : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, last : UInt<1>}}}
    
    inst ElasticBufferTLASTGenerator of ElasticBufferTLASTGenerator @[TLASTGenerator.scala 14:23]
    ElasticBufferTLASTGenerator.clock <= clock
    ElasticBufferTLASTGenerator.reset <= reset
    ElasticBufferTLASTGenerator.io.in.bits <= io.row_len.bits @[TLASTGenerator.scala 15:17]
    ElasticBufferTLASTGenerator.io.in.valid <= io.row_len.valid @[TLASTGenerator.scala 15:17]
    io.row_len.ready <= ElasticBufferTLASTGenerator.io.in.ready @[TLASTGenerator.scala 15:17]
    reg state : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TLASTGenerator.scala 75:24]
    reg count : UInt<32>, clock @[TLASTGenerator.scala 77:20]
    node _T_38 = eq(UInt<1>("h00"), state) @[Conditional.scala 37:30]
    when _T_38 : @[Conditional.scala 40:58]
      node _T_40 = neq(ElasticBufferTLASTGenerator.io.out.bits, UInt<1>("h00")) @[TLASTGenerator.scala 80:49]
      node _T_41 = and(ElasticBufferTLASTGenerator.io.out.valid, _T_40) @[TLASTGenerator.scala 80:32]
      node _T_42 = and(_T_41, io.mult_res.valid) @[TLASTGenerator.scala 80:58]
      node _T_43 = and(_T_42, io.out.ready) @[TLASTGenerator.scala 80:79]
      node _T_45 = neq(ElasticBufferTLASTGenerator.io.out.bits, UInt<1>("h01")) @[TLASTGenerator.scala 80:112]
      node _T_46 = and(_T_43, _T_45) @[TLASTGenerator.scala 80:95]
      when _T_46 : @[TLASTGenerator.scala 80:122]
        state <= UInt<1>("h01") @[TLASTGenerator.scala 81:23]
        skip @[TLASTGenerator.scala 80:122]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_47 = eq(UInt<1>("h01"), state) @[Conditional.scala 37:30]
      when _T_47 : @[Conditional.scala 39:67]
        node _T_48 = and(io.out.ready, io.mult_res.valid) @[TLASTGenerator.scala 85:31]
        node _T_50 = sub(ElasticBufferTLASTGenerator.io.out.bits, UInt<1>("h01")) @[TLASTGenerator.scala 85:79]
        node _T_51 = asUInt(_T_50) @[TLASTGenerator.scala 85:79]
        node _T_52 = tail(_T_51, 1) @[TLASTGenerator.scala 85:79]
        node _T_53 = eq(count, _T_52) @[TLASTGenerator.scala 85:62]
        node _T_54 = and(_T_48, _T_53) @[TLASTGenerator.scala 85:52]
        when _T_54 : @[TLASTGenerator.scala 85:87]
          state <= UInt<1>("h00") @[TLASTGenerator.scala 86:23]
          skip @[TLASTGenerator.scala 85:87]
        skip @[Conditional.scala 39:67]
    io.out.bits.data <= io.mult_res.bits @[TLASTGenerator.scala 92:22]
    io.out.bits.last <= UInt<1>("h00") @[TLASTGenerator.scala 93:22]
    io.out.valid <= UInt<1>("h00") @[TLASTGenerator.scala 94:18]
    ElasticBufferTLASTGenerator.io.out.ready <= UInt<1>("h00") @[TLASTGenerator.scala 95:19]
    io.mult_res.ready <= UInt<1>("h00") @[TLASTGenerator.scala 96:23]
    node _T_59 = eq(UInt<1>("h00"), state) @[Conditional.scala 37:30]
    when _T_59 : @[Conditional.scala 40:58]
      count <= UInt<1>("h00") @[TLASTGenerator.scala 99:19]
      when ElasticBufferTLASTGenerator.io.out.valid : @[TLASTGenerator.scala 100:33]
        node _T_62 = eq(ElasticBufferTLASTGenerator.io.out.bits, UInt<1>("h00")) @[TLASTGenerator.scala 101:35]
        when _T_62 : @[TLASTGenerator.scala 101:44]
          io.out.bits.data <= UInt<1>("h00") @[TLASTGenerator.scala 102:38]
          io.out.bits.last <= UInt<1>("h01") @[TLASTGenerator.scala 103:38]
          io.out.valid <= UInt<1>("h01") @[TLASTGenerator.scala 104:34]
          ElasticBufferTLASTGenerator.io.out.ready <= io.out.ready @[TLASTGenerator.scala 105:35]
          skip @[TLASTGenerator.scala 101:44]
        else : @[TLASTGenerator.scala 106:48]
          when io.mult_res.valid : @[TLASTGenerator.scala 106:48]
            io.out.bits.data <= io.mult_res.bits @[TLASTGenerator.scala 107:38]
            io.out.valid <= UInt<1>("h01") @[TLASTGenerator.scala 108:34]
            node _T_68 = eq(ElasticBufferTLASTGenerator.io.out.bits, UInt<1>("h01")) @[TLASTGenerator.scala 109:54]
            io.out.bits.last <= _T_68 @[TLASTGenerator.scala 109:38]
            when io.out.ready : @[TLASTGenerator.scala 110:40]
              io.mult_res.ready <= UInt<1>("h01") @[TLASTGenerator.scala 111:43]
              node _T_71 = eq(ElasticBufferTLASTGenerator.io.out.bits, UInt<1>("h01")) @[TLASTGenerator.scala 112:43]
              when _T_71 : @[TLASTGenerator.scala 112:52]
                ElasticBufferTLASTGenerator.io.out.ready <= UInt<1>("h01") @[TLASTGenerator.scala 113:41]
                skip @[TLASTGenerator.scala 112:52]
              else : @[TLASTGenerator.scala 114:38]
                node _T_74 = add(count, UInt<1>("h01")) @[TLASTGenerator.scala 115:42]
                node _T_75 = tail(_T_74, 1) @[TLASTGenerator.scala 115:42]
                count <= _T_75 @[TLASTGenerator.scala 115:33]
                skip @[TLASTGenerator.scala 114:38]
              skip @[TLASTGenerator.scala 110:40]
            skip @[TLASTGenerator.scala 106:48]
        skip @[TLASTGenerator.scala 100:33]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_76 = eq(UInt<1>("h01"), state) @[Conditional.scala 37:30]
      when _T_76 : @[Conditional.scala 39:67]
        node _T_77 = and(io.out.ready, io.mult_res.valid) @[TLASTGenerator.scala 122:31]
        when _T_77 : @[TLASTGenerator.scala 122:53]
          io.out.bits.data <= io.mult_res.bits @[TLASTGenerator.scala 123:34]
          io.out.valid <= UInt<1>("h01") @[TLASTGenerator.scala 124:30]
          node _T_80 = add(count, UInt<1>("h01")) @[TLASTGenerator.scala 125:32]
          node _T_81 = tail(_T_80, 1) @[TLASTGenerator.scala 125:32]
          count <= _T_81 @[TLASTGenerator.scala 125:23]
          io.mult_res.ready <= UInt<1>("h01") @[TLASTGenerator.scala 126:35]
          node _T_84 = sub(ElasticBufferTLASTGenerator.io.out.bits, UInt<1>("h01")) @[TLASTGenerator.scala 127:45]
          node _T_85 = asUInt(_T_84) @[TLASTGenerator.scala 127:45]
          node _T_86 = tail(_T_85, 1) @[TLASTGenerator.scala 127:45]
          node _T_87 = eq(count, _T_86) @[TLASTGenerator.scala 127:28]
          when _T_87 : @[TLASTGenerator.scala 127:52]
            io.out.bits.last <= UInt<1>("h01") @[TLASTGenerator.scala 128:38]
            ElasticBufferTLASTGenerator.io.out.ready <= UInt<1>("h01") @[TLASTGenerator.scala 129:35]
            count <= UInt<1>("h00") @[TLASTGenerator.scala 130:27]
            skip @[TLASTGenerator.scala 127:52]
          skip @[TLASTGenerator.scala 122:53]
        skip @[Conditional.scala 39:67]
    
