// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="len_stream,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.245000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=465,HLS_SYN_LUT=775}" *)

module len_stream (
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt,
        output_size_loopback,
        offset_loopback,
        rowptr_stream_TDATA,
        rowptr_stream_TKEEP,
        rowptr_stream_TLAST,
        output_stream_V_TDATA,
        output_size_loopback_ap_vld,
        offset_loopback_ap_vld,
        rowptr_stream_TVALID,
        rowptr_stream_TREADY,
        output_stream_V_TVALID,
        output_stream_V_TREADY
);

parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;
output  [31:0] output_size_loopback;
output  [31:0] offset_loopback;
input  [31:0] rowptr_stream_TDATA;
input  [3:0] rowptr_stream_TKEEP;
input   rowptr_stream_TLAST;
output  [31:0] output_stream_V_TDATA;
output   output_size_loopback_ap_vld;
output   offset_loopback_ap_vld;
input   rowptr_stream_TVALID;
output   rowptr_stream_TREADY;
output   output_stream_V_TVALID;
input   output_stream_V_TREADY;

reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire   [31:0] val_size;
wire   [31:0] output_size;
wire   [31:0] offset;
wire    Block_proc_U0_ap_start;
wire    Block_proc_U0_ap_done;
wire    Block_proc_U0_ap_continue;
wire    Block_proc_U0_ap_idle;
wire    Block_proc_U0_ap_ready;
wire   [31:0] Block_proc_U0_output_size_loopback;
wire    Block_proc_U0_output_size_loopback_ap_vld;
wire   [31:0] Block_proc_U0_offset_loopback;
wire    Block_proc_U0_offset_loopback_ap_vld;
wire   [31:0] Block_proc_U0_ap_return;
wire    ap_channel_done_tmp_loc_channel;
wire    tmp_loc_channel_full_n;
wire    Loop_1_proc_U0_ap_start;
wire    Loop_1_proc_U0_ap_done;
wire    Loop_1_proc_U0_ap_continue;
wire    Loop_1_proc_U0_ap_idle;
wire    Loop_1_proc_U0_ap_ready;
wire    Loop_1_proc_U0_rowptr_stream_TREADY;
wire   [31:0] Loop_1_proc_U0_output_stream_V_TDATA;
wire    Loop_1_proc_U0_output_stream_V_TVALID;
wire    ap_sync_continue;
wire   [31:0] tmp_loc_channel_dout;
wire    tmp_loc_channel_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_Block_proc_U0_ap_ready;
wire    ap_sync_Block_proc_U0_ap_ready;
reg   [1:0] Block_proc_U0_ap_ready_count;
reg    ap_sync_reg_Loop_1_proc_U0_ap_ready;
wire    ap_sync_Loop_1_proc_U0_ap_ready;
reg   [1:0] Loop_1_proc_U0_ap_ready_count;
wire    Block_proc_U0_start_full_n;
wire    Block_proc_U0_start_write;
wire    Loop_1_proc_U0_start_full_n;
wire    Loop_1_proc_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_Block_proc_U0_ap_ready = 1'b0;
#0 Block_proc_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_Loop_1_proc_U0_ap_ready = 1'b0;
#0 Loop_1_proc_U0_ap_ready_count = 2'd0;
end

len_stream_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
len_stream_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .val_size(val_size),
    .output_size(output_size),
    .offset(offset)
);

Block_proc Block_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Block_proc_U0_ap_start),
    .ap_done(Block_proc_U0_ap_done),
    .ap_continue(Block_proc_U0_ap_continue),
    .ap_idle(Block_proc_U0_ap_idle),
    .ap_ready(Block_proc_U0_ap_ready),
    .output_size(output_size),
    .output_size_loopback(Block_proc_U0_output_size_loopback),
    .output_size_loopback_ap_vld(Block_proc_U0_output_size_loopback_ap_vld),
    .offset(offset),
    .offset_loopback(Block_proc_U0_offset_loopback),
    .offset_loopback_ap_vld(Block_proc_U0_offset_loopback_ap_vld),
    .ap_return(Block_proc_U0_ap_return)
);

Loop_1_proc Loop_1_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Loop_1_proc_U0_ap_start),
    .ap_done(Loop_1_proc_U0_ap_done),
    .ap_continue(Loop_1_proc_U0_ap_continue),
    .ap_idle(Loop_1_proc_U0_ap_idle),
    .ap_ready(Loop_1_proc_U0_ap_ready),
    .p_read(tmp_loc_channel_dout),
    .rowptr_stream_TDATA(rowptr_stream_TDATA),
    .rowptr_stream_TVALID(rowptr_stream_TVALID),
    .rowptr_stream_TREADY(Loop_1_proc_U0_rowptr_stream_TREADY),
    .rowptr_stream_TKEEP(rowptr_stream_TKEEP),
    .rowptr_stream_TLAST(rowptr_stream_TLAST),
    .output_stream_V_TDATA(Loop_1_proc_U0_output_stream_V_TDATA),
    .output_stream_V_TVALID(Loop_1_proc_U0_output_stream_V_TVALID),
    .output_stream_V_TREADY(output_stream_V_TREADY)
);

fifo_w32_d2_A tmp_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc_U0_ap_return),
    .if_full_n(tmp_loc_channel_full_n),
    .if_write(Block_proc_U0_ap_done),
    .if_dout(tmp_loc_channel_dout),
    .if_empty_n(tmp_loc_channel_empty_n),
    .if_read(Loop_1_proc_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_Block_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_Block_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Block_proc_U0_ap_ready <= ap_sync_Block_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_Loop_1_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_Loop_1_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_sync_Loop_1_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == Block_proc_U0_ap_ready) & (ap_sync_ready == 1'b1))) begin
        Block_proc_U0_ap_ready_count <= (Block_proc_U0_ap_ready_count - 2'd1);
    end else if (((1'b1 == Block_proc_U0_ap_ready) & (ap_sync_ready == 1'b0))) begin
        Block_proc_U0_ap_ready_count <= (Block_proc_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == Loop_1_proc_U0_ap_ready) & (ap_sync_ready == 1'b1))) begin
        Loop_1_proc_U0_ap_ready_count <= (Loop_1_proc_U0_ap_ready_count - 2'd1);
    end else if (((1'b1 == Loop_1_proc_U0_ap_ready) & (ap_sync_ready == 1'b0))) begin
        Loop_1_proc_U0_ap_ready_count <= (Loop_1_proc_U0_ap_ready_count + 2'd1);
    end
end

assign Block_proc_U0_ap_continue = tmp_loc_channel_full_n;

assign Block_proc_U0_ap_start = ((ap_sync_reg_Block_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign Block_proc_U0_start_full_n = 1'b1;

assign Block_proc_U0_start_write = 1'b0;

assign Loop_1_proc_U0_ap_continue = 1'b1;

assign Loop_1_proc_U0_ap_start = (tmp_loc_channel_empty_n & (ap_sync_reg_Loop_1_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign Loop_1_proc_U0_start_full_n = 1'b1;

assign Loop_1_proc_U0_start_write = 1'b0;

assign ap_channel_done_tmp_loc_channel = Block_proc_U0_ap_done;

assign ap_done = Loop_1_proc_U0_ap_done;

assign ap_idle = ((tmp_loc_channel_empty_n ^ 1'b1) & Loop_1_proc_U0_ap_idle & Block_proc_U0_ap_idle);

assign ap_ready = ap_sync_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_Block_proc_U0_ap_ready = (ap_sync_reg_Block_proc_U0_ap_ready | Block_proc_U0_ap_ready);

assign ap_sync_Loop_1_proc_U0_ap_ready = (ap_sync_reg_Loop_1_proc_U0_ap_ready | Loop_1_proc_U0_ap_ready);

assign ap_sync_continue = 1'b1;

assign ap_sync_done = Loop_1_proc_U0_ap_done;

assign ap_sync_ready = (ap_sync_Loop_1_proc_U0_ap_ready & ap_sync_Block_proc_U0_ap_ready);

assign offset_loopback = Block_proc_U0_offset_loopback;

assign offset_loopback_ap_vld = Block_proc_U0_offset_loopback_ap_vld;

assign output_size_loopback = Block_proc_U0_output_size_loopback;

assign output_size_loopback_ap_vld = Block_proc_U0_output_size_loopback_ap_vld;

assign output_stream_V_TDATA = Loop_1_proc_U0_output_stream_V_TDATA;

assign output_stream_V_TVALID = Loop_1_proc_U0_output_stream_V_TVALID;

assign rowptr_stream_TREADY = Loop_1_proc_U0_rowptr_stream_TREADY;

endmodule //len_stream
